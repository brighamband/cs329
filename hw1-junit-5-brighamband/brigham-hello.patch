From 117645abfbe7a0ae34c3a0902eb24eb14e64ccce Mon Sep 17 00:00:00 2001
From: Brigham Andersen <brighamband@gmail.com>
Date: Fri, 14 Jan 2022 11:36:49 -0700
Subject: [PATCH] Finish JUnit5AppTest

---
 .../com/makotojava/learn/hellojunit5/App.java |  22 +-
 .../learn/hellojunit5/JUnit5AppTest.java      | 451 ++++++++----------
 2 files changed, 218 insertions(+), 255 deletions(-)

diff --git a/src/main/java/com/makotojava/learn/hellojunit5/App.java b/src/main/java/com/makotojava/learn/hellojunit5/App.java
index 34b91b0..c0303c2 100644
--- a/src/main/java/com/makotojava/learn/hellojunit5/App.java
+++ b/src/main/java/com/makotojava/learn/hellojunit5/App.java
@@ -36,15 +36,17 @@ public class App {
    *           code, son.
    */
   public long add(long[] operands) {
+    if (operands == null) {
+      throw new IllegalArgumentException("Operands argument cannot be null");
+    }
+    if (operands.length == 0) {
+      throw new IllegalArgumentException("Operands argument cannot be empty");
+    }
     // Compute the sum
-    long ret = Long.MIN_VALUE;
-    // TDD - add this once we run all the unit tests.
-    //
-    // TODO: As an exercise, implement this method so that all of the unit tests
-    /// you write for it pass. Once you do that, you're done!
-    //
-    // Hint: if you get stuck, look at the {@link com.makotojava.learn.hellojunit5.solution.App App class}
-    //
-    return ret;
+    long sum = 0;
+    for (long operand : operands) {
+      sum += operand;
+    }
+    return sum;
   }
-}
+}
\ No newline at end of file
diff --git a/src/test/java/com/makotojava/learn/hellojunit5/JUnit5AppTest.java b/src/test/java/com/makotojava/learn/hellojunit5/JUnit5AppTest.java
index d67538c..4f65150 100644
--- a/src/test/java/com/makotojava/learn/hellojunit5/JUnit5AppTest.java
+++ b/src/test/java/com/makotojava/learn/hellojunit5/JUnit5AppTest.java
@@ -1,6 +1,14 @@
 package com.makotojava.learn.hellojunit5;
 
 import static org.junit.jupiter.api.Assertions.fail;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertAll;
+import static org.junit.jupiter.api.Assumptions.assumingThat;
+import static org.junit.Assume.assumeTrue;
+
+import java.time.LocalDateTime;
 
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.AfterEach;
@@ -8,6 +16,7 @@ import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.DisplayName;
+import org.junit.jupiter.api.Nested;
 import org.junit.jupiter.api.Test;
 import org.junit.platform.runner.JUnitPlatform;
 import org.junit.runner.RunWith;
@@ -16,309 +25,261 @@ import org.slf4j.LoggerFactory;
 
 /**
  * JUnit 5 (with JUnitPlatform.class)
- * 
- * Class-level Exercises:
- * <ol>
- * <li>Enable Eclipse JUnit support for this test class using the {@link org.junit.runner.RunWith @RunWith} and
- * {@link org.junit.platform.runner.JUnitPlatform
- * JUnitPlatform} class.</li>
- * <li>Give the class a cool {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the JUnit test
- * report.</li>
- * </ol>
  *
  */
+@RunWith(JUnitPlatform.class)
+@DisplayName("Testing using JUnit 5")
 public class JUnit5AppTest {
 
   // Create a JDK Logger here
+  private static final Logger log = LoggerFactory.getLogger(JUnit5AppTest.class);
 
   // Create a fixture for the class under test
+  private App classUnderTest;
 
   // Do something before ANY test is run in this class
+  @BeforeAll
   public static void init() {
+    log.info("@BeforeAll: init()");
   }
-
+  
   // Do something after ALL tests in this class are run
+  @AfterAll
   public static void done() {
+    log.info("@AfterAll: done()");
   }
-
+  
   // Create an instance of the test class before each @Test method is executed
+  @BeforeEach
+  public void setup() throws Exception {
+    log.info("@BeforeEach: setup()");
+    classUnderTest = new App();
+  }
 
   // Destroy reference to the instance of the test class after each @Test method is executed
+  @AfterEach
+  public void tearDown() throws Exception {
+    log.info("@AfterEach: tearDown()");
+    classUnderTest = null;
+  }
 
   // Disabled test
+  @Test
+  @Disabled
+  @DisplayName("A disabled test")
   void testNotRun() {
+    log.info("This test will not run since it is disabled");
   }
 
-  /**
-   * testAdd() - Exercises:
-   * <ol>
-   * <li>Tell JUnit this method is a test method.</li>
-   * <li>Give it a cool display name for the test report.</li>
-   * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-   * <li>Create a group of three tests of the add methods with the following arrays of positive numbers:
-   * <ol>
-   * <li>1, 2, 3, 4</li>
-   * <li>20, 934, 110</li>
-   * <li>2, 4, 6</li>
-   * </ol>
-   * Ensure the actual sum matches the expected sum for each group of numbers. Make sure that all groups of numbers are
-   * tested (i.e., if one fails, it should not fail the test method). Hint: use
-   * {@link org.junit.jupiter.api.Assertions#assertAll(org.junit.jupiter.api.function.Executable...) assertAll()}
-   * </ol>
-   */
+  @Test
+  @DisplayName("Tests addition for positive numbers")
   public void testAdd() {
-    //
-    // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see the
-    // buttery smooth javadoc above.)
-    //
-    fail("Test not implemented!");
+    log.info("@Test: testAdd()");
+    assertNotNull(classUnderTest);
+    assertAll(
+      () -> {
+        // Test #1
+        long[] numsToSum = { 1, 2, 3, 4 };
+        long expectedSum = 10;
+        long actualSum = classUnderTest.add(numsToSum);
+        assertEquals(expectedSum, actualSum);
+      },
+      () -> {
+        // Test #2
+        long[] numsToSum = { 20, 934, 110 };
+        long expectedSum = 1064;
+        long actualSum = classUnderTest.add(numsToSum);
+        assertEquals(expectedSum, actualSum);
+      },
+      () -> {
+        // Test #3
+        long[] numsToSum = { 2, 4, 6 };
+        long expectedSum = 12;
+        long actualSum = classUnderTest.add(numsToSum);
+        assertEquals(expectedSum, actualSum);
+      }
+    );
   }
 
-  /**
-   * Class-level Exercises:
-   * <ol>
-   * <li>Make this class a nested test class (hint: use {@link org.junit.jupiter.api.Nested @Nested}).
-   * <li>Give the class a cool {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the JUnit test
-   * report.</li>
-   * <li>Create an instance of the {@link com.makotojava.learn.hellojunit5.App App} class specifically for this nested
-   * class:
-   * <ul>
-   * <li>Set the <code>classUnderTest</code> variable in a method called <code>setUp()</code> that runs before the test
-   * method does (hint: use {@link org.junit.jupiter.api.BeforeEach @BeforeEach})</li>
-   * </ul>
-   * <li>Set the <code>classUnderTest</code> variable to null in a method called <code>tearDown()</code> that runs after
-   * the
-   * test method does (hint: use {@link org.junit.jupiter.api.BeforeEach @AfterEach})</li>
-   * </ol>
-   * 
-   */
+  @Nested
+  @DisplayName("Tests addition for negative numbers")
   class NegativeNumbersTest {
 
-    /**
-     * testAdd() - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-     * <li>Create a group of three tests of the add methods with the following arrays of positive numbers:
-     * <ol>
-     * <li>-1, -2, -3, -4</li>
-     * <li>-20, -934, -110</li>
-     * <li>-2, -4, -6</li>
-     * </ol>
-     * Ensure the actual sum matches the expected sum for each group of numbers. Make sure that all groups of numbers
-     * are
-     * tested (i.e., if one fails, it should not fail the test method). Hint: use
-     * {@link org.junit.jupiter.api.Assertions#assertAll(org.junit.jupiter.api.function.Executable...) assertAll()}
-     * </ol>
-     */
+    private App classUnderTest;
+
+    @BeforeEach
+    public void setup() throws Exception {
+      classUnderTest = new App();
+    }
+
+    @AfterEach
+    public void tearDown() throws Exception {
+      classUnderTest = null;
+    }
+
+    @Test
+    @DisplayName("When there's 3 negative numbers to add")
     public void testAdd() {
-      //
-      // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see
-      // the buttery smooth javadoc above.)
-      //
-      fail("Test not implemented!");
+      log.info("@Test: testAdd()");
+      assertNotNull(classUnderTest);
+      assertAll(
+      () -> {
+        // Test #1
+        long[] numsToSum = { -1, -2, -3, -4 };
+        long expectedSum = -10;
+        long actualSum = classUnderTest.add(numsToSum);
+        assertEquals(expectedSum, actualSum);
+      },
+      () -> {
+        // Test #2
+        long[] numsToSum = { -20, -934, -110 };
+        long expectedSum = -1064;
+        long actualSum = classUnderTest.add(numsToSum);
+        assertEquals(expectedSum, actualSum);
+      },
+      () -> {
+        // Test #3
+        long[] numsToSum = { -2, -4, -6 };
+        long expectedSum = -12;
+        long actualSum = classUnderTest.add(numsToSum);
+        assertEquals(expectedSum, actualSum);
+      }
+    );
     }
   }
 
-  /**
-   * Class-level Exercises:
-   * <ol>
-   * <li>Make this class a nested test class (hint: use {@link org.junit.jupiter.api.Nested @Nested}).
-   * <li>Give the class a cool {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the JUnit test
-   * report.</li>
-   * </ol>
-   * 
-   */
+  @Nested
+  @DisplayName("Tests addition of positive and negative numbers")
   class PositiveAndNegativeNumbersTest {
 
-    /**
-     * testAdd() - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-     * <li>Create a group of three tests of the add methods with the following arrays of positive numbers:
-     * <ol>
-     * <li>-1, 2, -3, 4</li>
-     * <li>-20, 934, -110</li>
-     * <li>-2, -4, 6</li>
-     * </ol>
-     * Ensure the actual sum matches the expected sum for each group of numbers. Make sure that all groups of numbers
-     * are
-     * tested (i.e., if one fails, it should not fail the test method). Hint: use
-     * {@link org.junit.jupiter.api.Assertions#assertAll(org.junit.jupiter.api.function.Executable...) assertAll()}
-     * </ol>
-     */
+    @Test
+    @DisplayName("When there's a mix of positive and negative numbers in 3 tests")
     public void testAdd() {
-      //
-      // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see
-      // the buttery smooth javadoc above.)
-      //
-      fail("Test not implemented!");
+      log.info("@Test: testAdd()");
+      assertNotNull(classUnderTest);
+      assertAll(
+      () -> {
+        // Test #1
+        long[] numsToSum = { -1, 2, -3, 4 };
+        long expectedSum = 2;
+        long actualSum = classUnderTest.add(numsToSum);
+        assertEquals(expectedSum, actualSum);
+      },
+      () -> {
+        // Test #2
+        long[] numsToSum = { -20, 934, -110 };
+        long expectedSum = 804;
+        long actualSum = classUnderTest.add(numsToSum);
+        assertEquals(expectedSum, actualSum);
+      },
+      () -> {
+        // Test #3
+        long[] numsToSum = { -2, -4, 6 };
+        long expectedSum = 0;
+        long actualSum = classUnderTest.add(numsToSum);
+        assertEquals(expectedSum, actualSum);
+      }
+    );
     }
 
-    /**
-     * testAdd_OnlyOnFriday - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>Use the JDK 8 Date/Time API to get the current local date/time, along with a simple Assumption (hint: use
-     * {@link org.junit.jupiter.api.Assumptions#assumeTrue(boolean) assumeTrue()}) that today is Friday
-     * (or any other day of the week of your choosing, just so you pick one), or the test is skipped.</li>
-     * <li>Pass the following numbers as operands to the {@link com.makotojava.learn.hellojunit5.App#add(long[]) add}
-     * method: 1, 2, 3, 4, 5</li>
-     * <li>Ensure the actual sum matches the expected sum.</li>
-     * </ol>
-     */
+    @Test
+    @DisplayName("Tests add only on Friday (no lambda)")
     public void testAdd_OnlyOnFriday() {
-      //
-      // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see
-      // the buttery smooth javadoc above.)
-      //
-      fail("Test not implemented!");
+      assertNotNull(classUnderTest);
+      LocalDateTime ldt = LocalDateTime.now();
+      assumeTrue("Test skipped... it's not Friday!", ldt.getDayOfWeek().getValue() == 5);
+      long[] numsToSum = { 1, 2, 3, 4, 5 };
+      long expectedSum = 15;
+      long actualSum = classUnderTest.add(numsToSum);
+      assertEquals(expectedSum, actualSum);
     }
 
-    /**
-     * testAdd_OnlyOnFriday_WithLambda - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>Use the JDK 8 Date/Time API to get the current local date/time, along with a simple Assumption (hint: use
-     * {@link org.junit.jupiter.api.Assumptions#assumingThat(boolean, org.junit.jupiter.api.function.Executable)
-     * assumingThat()}) that today is Friday
-     * (or any other day of the week of your choosing, just so you pick one), or the test is skipped.</li>
-     * <li>Pass the following numbers as operands to the {@link com.makotojava.learn.hellojunit5.App#add(long[]) add}
-     * method: 1, 2, 3, 4, 5</li>
-     * <li>Ensure the actual sum matches the expected sum.</li>
-     * </ol>
-     */
+    @Test
+    @DisplayName("Tests add only on Thursday (with lambda)")
     public void testAdd_OnlyOnFriday_WithLambda() {
-      //
-      // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see
-      // the buttery smooth javadoc above.)
-      //
-      fail("Test not implemented!");
+      assertNotNull(classUnderTest);
+      LocalDateTime ldt = LocalDateTime.now();
+      assumingThat(ldt.getDayOfWeek().getValue() == 4,
+        () -> {
+          long[] numsToSum = { 1, 2, 3, 4, 5 };
+          long expectedSum = 15;
+          long actualSum = classUnderTest.add(numsToSum);
+          assertEquals(expectedSum, actualSum);
+        }
+      );
     }
 
   }
 
-  /**
-   * Class-level Exercises:
-   * <ol>
-   * <li>Make this class a nested test class (hint: use {@link org.junit.jupiter.api.Nested @Nested}).
-   * <li>Give the class a cool {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the JUnit test
-   * report.</li>
-   * </ol>
-   * 
-   */
+  @Nested
+  @DisplayName("Tests single operand")
   class JUnit5AppSingleOperandTest {
 
-    /**
-     * testAdd_NumbersGt0() - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-     * <li>Create a group of two tests of the add methods with the following arrays of positive numbers:
-     * <ol>
-     * <li>1</li>
-     * <li>0</li>
-     * </ol>
-     * Ensure the actual sum matches the expected sum for each group of numbers. Make sure that all groups of numbers
-     * are
-     * tested (i.e., if one fails, it should not fail the test method). Hint: use
-     * {@link org.junit.jupiter.api.Assertions#assertAll(org.junit.jupiter.api.function.Executable...) assertAll()}
-     * </ol>
-     */
+    @Test
+    @DisplayName("Adds numbers greater than 0")
     public void testAdd_NumbersGt0() {
-      //
-      // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see
-      // the buttery smooth javadoc above.)
-      //
-      fail("Test not implemented!");
+      assertNotNull(classUnderTest);
+      assertAll(
+        () -> {
+          // Test #1
+          long[] numsToSum = { 1 };
+          long expectedSum = 1;
+          long actualSum = classUnderTest.add(numsToSum);
+          assertEquals(expectedSum, actualSum);
+        },
+        () -> {
+          // Test #2
+          long[] numsToSum = { 0 };
+          long expectedSum = 0;
+          long actualSum = classUnderTest.add(numsToSum);
+          assertEquals(expectedSum, actualSum);
+        }
+      );
     }
 
-    /**
-     * testAdd_NumbersLt0() - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-     * <li>Create a group of two tests of the add methods with the following arrays of positive numbers:
-     * <ol>
-     * <li>-1</li>
-     * <li>-10</li>
-     * </ol>
-     * Ensure the actual sum matches the expected sum for each group of numbers. Make sure that all groups of numbers
-     * are
-     * tested (i.e., if one fails, it should not fail the test method). Hint: use
-     * {@link org.junit.jupiter.api.Assertions#assertAll(org.junit.jupiter.api.function.Executable...) assertAll()}
-     * </ol>
-     */
+    @Test
+    @DisplayName("Tests numbers less than 0")
     public void testAdd_NumbersLt0() {
-      //
-      // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see
-      // the buttery smooth javadoc above.)
-      //
-      fail("Test not implemented!");
+      assertNotNull(classUnderTest);
+      assertAll(
+        () -> {
+          // Test #1
+          long[] numsToSum = { -1 };
+          long expectedSum = -1;
+          long actualSum = classUnderTest.add(numsToSum);
+          assertEquals(expectedSum, actualSum);
+        },
+        () -> {
+          // Test #2
+          long[] numsToSum = { -10 };
+          long expectedSum = -10;
+          long actualSum = classUnderTest.add(numsToSum);
+          assertEquals(expectedSum, actualSum);
+        }
+      );
     }
   }
 
-  /**
-   * Class-level Exercises:
-   * <ol>
-   * <li>Make this class a nested test class (hint: use {@link org.junit.jupiter.api.Nested @Nested}).
-   * <li>Give the class a cool {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the JUnit test
-   * report.</li>
-   * </ol>
-   * 
-   */
+  @Nested
+  @DisplayName("Tests zero operands")
   class JUnit5AppZeroOperandsTest {
 
-    /**
-     * testAdd_ZeroOperands_EmptyArgument() - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-     * <li>Pass an empty array as operands argument to the {@link com.makotojava.learn.hellojunit5.App#add(long[]) add}
-     * method.</li>
-     * <li>Ensure that an {@link java.lang.IllegalArgumentException IllegalArgumentException} is thrown (hint: use the
-     * {@link org.junit.jupiter.api.Assertions#assertThrows(Class, org.junit.jupiter.api.function.Executable)
-     * assertThrows()} method).</li>
-     * </ol>
-     */
+    @Test
+    @DisplayName("Tests adding zero operands with empty argument")
     public void testAdd_ZeroOperands_EmptyArgument() {
-      //
-      // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see
-      // the buttery smooth javadoc above.)
-      //
-      fail("Test not implemented!");
+      assertNotNull(classUnderTest);
+      long[] numsToSum = {};
+      Throwable expectedException = assertThrows(IllegalArgumentException.class, () -> classUnderTest.add(numsToSum));
+      assertEquals("Operands argument cannot be empty", expectedException.getLocalizedMessage());
     }
 
-    /**
-     * testAdd_ZeroOperands_NullArgument() - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-     * <li>Pass an empty array as operands argument to the {@link com.makotojava.learn.hellojunit5.App#add(long[]) add}
-     * method.</li>
-     * <li>Ensure that an {@link java.lang.IllegalArgumentException IllegalArgumentException} is thrown (hint: use the
-     * {@link org.junit.jupiter.api.Assertions#assertThrows(Class, org.junit.jupiter.api.function.Executable)
-     * assertThrows()} method).</li>
-     * <li>The test should fail if the message in the exception is not "Operands argument cannot be null".</li>
-     * </ol>
-     */
+    @Test
+    @DisplayName("Tests adding zero operands with null argument")
     public void testAdd_ZeroOperands_NullArgument() {
-      //
-      // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see
-      // the buttery smooth javadoc above.)
-      //
-      fail("Test not implemented!");
+      assertNotNull(classUnderTest);
+      long[] numsToSum = null;
+      Throwable expectedException = assertThrows(IllegalArgumentException.class, () -> classUnderTest.add(numsToSum));
+      assertEquals("Operands argument cannot be null", expectedException.getLocalizedMessage());
     }
-
   }
-
-}
+}
\ No newline at end of file
-- 
2.25.1

